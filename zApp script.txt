/**
 * @fileoverview Google Apps Script Backend for HazardFinder Application.
 * Handles API requests from the frontend to interact with Google Sheets
 * and triggers targeted push notifications via a custom backend server.
 *
 * @version 5.1
 * @author Gemini & User
 */

// =================================================================================
// CONFIGURATION - การตั้งค่า
// =================================================================================
const CONFIG = {
  users: {
    sheetName: "Users",
    columns: {
      id: "Employee ID",
      name: "Full Name"
    }
  },
  requests: {
    sheetName: "Requests",
    columns: {
      id: "ID",
      date: "Date",
      lastUpdated: "Last Updated",
      problem: "Problem",
      category: "Category",
      location: "Location",
      branch: "Branch", // ADDED: Branch column
      details: "Details",
      beforeImageUrl: "Before Image URL",
      requesterId: "Requester ID",
      requesterName: "Requester Name",
      status: "Status",
      afterImageUrl: "After Image URL",
      adminComment: "Admin Comment",
      updatedBy: "Updated By",
      rating: "Rating",
      ratingComment: "Rating Comment",
      assignedToId: "Assigned To ID",
      assignedToName: "Assigned To Name"
    }
  },
  admin: {
    sheetName: "Setting",
    columns: {
      id: "Admin ID"
    }
  },
  technicians: {
    sheetName: "Setting",
    columns: {
      id: "Technicians ID",
      name: "Full Name"
    }
  },
  categories: {
    sheetName: "Setting",
    columns: {
      name: "Category Name"
    }
  },
  notification: {
      backendServerUrl: "https://re-l1qo.onrender.com/send-notification"
  }
};


// =================================================================================
// MAIN API ENTRY POINT
// =================================================================================
function doPost(e) {
  try {
    const payload = JSON.parse(e.postData.contents);
    const action = payload.action;

    switch (action) {
      case 'login':
        return handleLogin(payload);
      case 'registerUser':
        return handleRegisterUser(payload);
      case 'getRequests':
        return handleGetRequests(payload);
      case 'createRequest':
        return handleCreateRequest(payload); // Updated
      case 'updateStatus':
        return handleUpdateStatus(payload);
      case 'addAfterImage':
        return handleAddAfterImage(payload);
      case 'deleteRequest':
        return handleDeleteRequest(payload);
      case 'updateRating':
        return handleUpdateRating(payload);
      case 'getTechnicians':
        return handleGetTechnicians();
      case 'getCategories':
        return handleGetCategories();
      default:
        return jsonError('Invalid action specified.');
    }
  } catch (error) {
    Logger.log(error.stack);
    return jsonError(`An unexpected error occurred: ${error.message}`);
  }
}

// =================================================================================
// ACTION HANDLERS
// =================================================================================

/**
 * Handles new user registration. Can also register a user as a technician.
 * @param {object} payload - The request payload containing name, employeeId, and isTechnician flag.
 * @returns {ContentService.TextOutput} JSON response.
 */
function handleRegisterUser(payload) {
    const { name, employeeId, isTechnician } = payload;
    if (!name || !employeeId) return jsonError('กรุณากรอกข้อมูลให้ครบถ้วน');

    const { sheet: usersSheet, headers: usersHeaders } = getSheetAndHeaders(CONFIG.users.sheetName);
    const idColIndex = usersHeaders[CONFIG.users.columns.id];
    const existingIds = usersSheet.getRange(2, idColIndex + 1, usersSheet.getLastRow(), 1).getValues().flat().map(String);

    if (existingIds.includes(String(employeeId))) {
      return jsonError('รหัสพนักงานนี้ถูกใช้งานแล้ว');
    }

    const newUserRow = [];
    const maxUserColIndex = Math.max(...Object.values(usersHeaders));
    for (let i = 0; i <= maxUserColIndex; i++) newUserRow.push('');
    newUserRow[idColIndex] = employeeId;
    newUserRow[usersHeaders[CONFIG.users.columns.name]] = name;
    usersSheet.appendRow(newUserRow);

    // If registering as a technician, add them to the Setting sheet.
    if (isTechnician) {
        try {
            const { sheet: settingSheet, headers: settingHeaders } = getSheetAndHeaders(CONFIG.technicians.sheetName);
            const techIdCol = settingHeaders[CONFIG.technicians.columns.id];
            const techNameCol = settingHeaders[CONFIG.technicians.columns.name];

            // Find the first empty row in the technicians columns to add the new data
            const lastRow = settingSheet.getLastRow();
            let targetRow = lastRow + 1; // Default to append
            for (let i = 2; i <= lastRow + 1; i++) {
                if (!settingSheet.getRange(i, techIdCol + 1).getValue() && !settingSheet.getRange(i, techNameCol + 1).getValue()) {
                    targetRow = i;
                    break;
                }
            }
            settingSheet.getRange(targetRow, techIdCol + 1).setValue(employeeId);
            settingSheet.getRange(targetRow, techNameCol + 1).setValue(name);
        } catch(e) {
            Logger.log(`Could not register user as technician: ${e.toString()}`);
            // Don't fail the whole registration, just log the error.
        }
    }

    return jsonResponse({ success: true, id: employeeId, name: name });
}

function handleLogin(payload) {
  const { sheet, headers } = getSheetAndHeaders(CONFIG.users.sheetName);
  const idCol = headers[CONFIG.users.columns.id];
  const nameCol = headers[CONFIG.users.columns.name];
  const values = sheet.getDataRange().getValues();
  for (let i = 1; i < values.length; i++) {
    if (String(values[i][idCol]) === String(payload.employeeId)) {
      const employeeIdStr = String(values[i][idCol]);
      const userData = {
        id: values[i][idCol],
        name: values[i][nameCol],
        isAdmin: checkAdmin(employeeIdStr),
        isTechnician: checkTechnician(employeeIdStr)
      };
      return jsonResponse(userData);
    }
  }
  return jsonResponse(null);
}

function handleGetRequests(payload) {
  const { sheet, headers } = getSheetAndHeaders(CONFIG.requests.sheetName);
  const data = sheet.getDataRange().getValues();
  data.shift();
  const { requesterId, isAdmin, isTechnician, employeeId } = payload;
  const requests = [];
  for (let i = 0; i < data.length; i++) {
    const row = data[i];
    const request = {};
    for (const key in CONFIG.requests.columns) {
        const colName = CONFIG.requests.columns[key];
        const colIndex = headers[colName];
        if (colIndex !== undefined) {
            let value = row[colIndex];
            if ((key === 'date' || key === 'lastUpdated') && value instanceof Date) value = value.toISOString();
            request[key] = value || "";
        }
    }
    if (Object.keys(request).length > 0 && request.id) {
        if (isAdmin) requests.push(request);
        else if (isTechnician && String(request.assignedToId) === String(employeeId)) requests.push(request);
        else if (!isAdmin && !isTechnician && String(request.requesterId) === String(requesterId)) requests.push(request);
    }
  }
  return jsonResponse(requests);
}

/**
 * Handles creation of a new request and triggers notifications.
 * Notifies all admins and the assigned technician (if any).
 * @param {object} payload - The request payload containing new request data.
 * @returns {ContentService.TextOutput} JSON response.
 */
function handleCreateRequest(payload) {
  const { sheet, headers } = getSheetAndHeaders(CONFIG.requests.sheetName);
  const newData = payload.data;
  const newRow = [];
  const now = new Date();
  const maxColIndex = Math.max(...Object.values(headers));
  for (let i = 0; i <= maxColIndex; i++) newRow.push('');
  const id = `REQ-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;
  newRow[headers[CONFIG.requests.columns.id]] = id;
  newRow[headers[CONFIG.requests.columns.date]] = now;
  newRow[headers[CONFIG.requests.columns.lastUpdated]] = now;
  newRow[headers[CONFIG.requests.columns.status]] = "รอดำเนินการ";
  newRow[headers[CONFIG.requests.columns.problem]] = newData.problem;
  newRow[headers[CONFIG.requests.columns.category]] = newData.category;
  newRow[headers[CONFIG.requests.columns.location]] = newData.location;
  newRow[headers[CONFIG.requests.columns.branch]] = "ชัยนาท"; // ใส่ชื่อสาขาตนเองที่นี่
  newRow[headers[CONFIG.requests.columns.details]] = newData.details;
  newRow[headers[CONFIG.requests.columns.beforeImageUrl]] = newData.beforeImageUrl;
  newRow[headers[CONFIG.requests.columns.requesterId]] = newData.requesterId;
  newRow[headers[CONFIG.requests.columns.requesterName]] = newData.requesterName;
  newRow[headers[CONFIG.requests.columns.updatedBy]] = newData.requesterName;
  newRow[headers[CONFIG.requests.columns.assignedToId]] = newData.assignedToId || '';
  newRow[headers[CONFIG.requests.columns.assignedToName]] = newData.assignedToName || '';
  sheet.appendRow(newRow);

  // --- Notification Logic ---
  const adminIds = getAdminIds();
  const notificationTitle = `มีเรื่องแจ้งใหม่: ${newData.problem}`;
  const notificationBody = `ผู้แจ้ง: ${newData.requesterName} | สถานที่: ${newData.location}`;

  // Notify all admins
  adminIds.forEach(adminId => {
    // Don't notify an admin if they are the one who created the request
    if (String(adminId) !== String(newData.requesterId)) {
       triggerPushNotification(notificationTitle, notificationBody, adminId);
    }
  });

  // Notify the assigned technician (if any and is not the requester)
  if (newData.assignedToId && String(newData.assignedToId) !== String(newData.requesterId)) {
    triggerPushNotification(
      `มีงานใหม่มอบหมาย: ${newData.problem}`,
      notificationBody,
      newData.assignedToId
    );
  }

  return jsonResponse({ success: true, id: id });
}


function handleUpdateStatus(payload) {
    const { id, status, comment, updaterName } = payload;
    const { sheet, headers } = getSheetAndHeaders(CONFIG.requests.sheetName);
    const rowNumber = findRowById(sheet, headers, id);
    if (rowNumber === -1) return jsonError(`Request with ID '${id}' not found.`);

    const rowData = sheet.getRange(rowNumber, 1, 1, sheet.getLastColumn()).getValues()[0];
    const originalRequest = {};
    for (const key in CONFIG.requests.columns) {
        const colName = CONFIG.requests.columns[key];
        const colIndex = headers[colName];
        if (colIndex !== undefined) originalRequest[key] = rowData[colIndex];
    }

    sheet.getRange(rowNumber, headers[CONFIG.requests.columns.status] + 1).setValue(status);
    sheet.getRange(rowNumber, headers[CONFIG.requests.columns.lastUpdated] + 1).setValue(new Date());
    sheet.getRange(rowNumber, headers[CONFIG.requests.columns.updatedBy] + 1).setValue(updaterName || "");
    if (status !== 'รอดำเนินการ') {
      sheet.getRange(rowNumber, headers[CONFIG.requests.columns.adminComment] + 1).setValue(comment || "");
    } else {
      sheet.getRange(rowNumber, headers[CONFIG.requests.columns.adminComment] + 1).setValue("");
    }

    const requesterId = originalRequest.requesterId;
    if (requesterId && originalRequest.status !== status) {
      triggerPushNotification(
        `อัปเดตสถานะ: ${originalRequest.problem}`,
        `สถานะใหม่คือ "${status}" โดย ${updaterName}`,
        requesterId
      );
    }

    return jsonResponse({ success: true, id: id });
}


function handleAddAfterImage(payload) {
    const { id, imageUrl, updaterName } = payload;
    const { sheet, headers } = getSheetAndHeaders(CONFIG.requests.sheetName);
    const rowNumber = findRowById(sheet, headers, id);
    if (rowNumber === -1) return jsonError(`Request with ID '${id}' not found.`);
    sheet.getRange(rowNumber, headers[CONFIG.requests.columns.afterImageUrl] + 1).setValue(imageUrl);
    sheet.getRange(rowNumber, headers[CONFIG.requests.columns.lastUpdated] + 1).setValue(new Date());
    sheet.getRange(rowNumber, headers[CONFIG.requests.columns.updatedBy] + 1).setValue(updaterName || "");
    return jsonResponse({ success: true, id: id });
}

function handleDeleteRequest(payload) {
    const { id, currentUserId } = payload;
    const { sheet, headers } = getSheetAndHeaders(CONFIG.requests.sheetName);
    const rowNumber = findRowById(sheet, headers, id);
    if (rowNumber === -1) return jsonError(`Request with ID '${id}' to delete was not found.`);
    const requesterIdColIndex = headers[CONFIG.requests.columns.requesterId];
    const sheetRequesterId = sheet.getRange(rowNumber, requesterIdColIndex + 1).getValue();
    const isAdmin = checkAdmin(String(currentUserId));
    if (!isAdmin && String(sheetRequesterId) !== String(currentUserId)) return jsonError('คุณไม่มีสิทธิ์ลบรายการแจ้งซ่อมนี้');
    sheet.deleteRow(rowNumber);
    return jsonResponse({ success: true, id: id });
}

function handleUpdateRating(payload) {
    const { id, rating, comment } = payload;
    if (!id || !rating) return jsonError("จำเป็นต้องมี ID และคะแนนของใบแจ้งซ่อม");
    const { sheet, headers } = getSheetAndHeaders(CONFIG.requests.sheetName);
    const rowNumber = findRowById(sheet, headers, id);
    if (rowNumber === -1) return jsonError(`ไม่พบใบแจ้งซ่อม ID '${id}'`);
    sheet.getRange(rowNumber, headers[CONFIG.requests.columns.rating] + 1).setValue(rating);
    sheet.getRange(rowNumber, headers[CONFIG.requests.columns.ratingComment] + 1).setValue(comment || "");
    sheet.getRange(rowNumber, headers[CONFIG.requests.columns.lastUpdated] + 1).setValue(new Date());
    return jsonResponse({ success: true, id: id });
}

function handleGetTechnicians() {
    const { sheet, headers } = getSheetAndHeaders(CONFIG.technicians.sheetName);
    const data = sheet.getDataRange().getValues();
    data.shift();
    const technicians = data.map(row => {
        const idColIndex = headers[CONFIG.technicians.columns.id];
        const nameColIndex = headers[CONFIG.technicians.columns.name];
        if (idColIndex !== undefined && nameColIndex !== undefined && row[idColIndex] && row[nameColIndex]) {
            return { id: String(row[idColIndex]), name: String(row[nameColIndex]) };
        }
        return null;
    }).filter(t => t !== null);
    const verifiedTechnicians = technicians.filter(tech => checkTechnician(tech.id));
    return jsonResponse(verifiedTechnicians);
}

function handleGetCategories() {
    const { sheet, headers } = getSheetAndHeaders(CONFIG.categories.sheetName);
    const data = sheet.getDataRange().getValues();
    data.shift();
    const categoryColIndex = headers[CONFIG.categories.columns.name];
    if (categoryColIndex === undefined) {
        return jsonError(`ไม่พบข้อมูลหมวดหมู่ในชีท "${CONFIG.categories.sheetName}"`);
    }
    const categories = data.map(row => String(row[categoryColIndex])).filter(category => category.trim() !== '');
    return jsonResponse(categories);
}


// =================================================================================
// NOTIFICATION HELPER
// =================================================================================

function triggerPushNotification(title, body, targetUserId = null) {
    const backendUrl = CONFIG.notification.backendServerUrl;
    if (!backendUrl) {
        Logger.log("Backend Server URL is not set in CONFIG. Skipping notification.");
        return;
    }

    const payload = {
      title: title,
      body: body
    };

    if (targetUserId) {
        payload.targetUserId = targetUserId;
    }

    const options = {
        'method': 'post',
        'contentType': 'application/json',
        'payload': JSON.stringify(payload),
        'muteHttpExceptions': true
    };

    try {
        const response = UrlFetchApp.fetch(backendUrl, options);
        Logger.log(`Notification sent. Payload: ${JSON.stringify(payload)}. Response: ${response.getResponseCode()} - ${response.getContentText()}`);
    } catch (e) {
        Logger.log(`Error sending notification: ${e.toString()}`);
    }
}


// =================================================================================
// UTILITY FUNCTIONS
// =================================================================================

/**
 * NEW: Helper function to get a list of all admin IDs.
 * @returns {string[]} An array of admin employee IDs.
 */
function getAdminIds() {
  try {
    const { sheet, headers } = getSheetAndHeaders(CONFIG.admin.sheetName);
    const idColIndex = headers[CONFIG.admin.columns.id];
    if (idColIndex === undefined) return [];
    const adminIds = sheet.getRange(2, idColIndex + 1, sheet.getLastRow(), 1)
                          .getValues()
                          .flat()
                          .map(String)
                          .filter(id => id.trim() !== ''); // Filter out empty strings
    return adminIds;
  } catch (e) {
    Logger.log(`Error in getAdminIds: ${e.toString()}`);
    return [];
  }
}

function findRowById(sheet, headers, id) {
    const idColIndex = headers[CONFIG.requests.columns.id];
    if (idColIndex === undefined) return -1;
    const ids = sheet.getRange(2, idColIndex + 1, sheet.getLastRow() - 1, 1).getValues();
    for (let i = 0; i < ids.length; i++) {
        if (String(ids[i][0]) === String(id)) return i + 2;
    }
    return -1;
}

function getSheetAndHeaders(sheetName) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(sheetName);
  if (!sheet) throw new Error(`Sheet with name "${sheetName}" was not found.`);
  const headerRow = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  const headers = {};
  headerRow.forEach((header, index) => { if (header) headers[header] = index; });
  let config;
  switch (sheetName) {
      case CONFIG.users.sheetName: config = CONFIG.users; break;
      case CONFIG.requests.sheetName: config = CONFIG.requests; break;
      case "Setting":
          config = { columns: { ...CONFIG.admin.columns, ...CONFIG.technicians.columns, ...CONFIG.categories.columns }};
          break;
      default: throw new Error(`Configuration for sheet "${sheetName}" not found.`);
  }
  for(const colKey in config.columns){
    const colName = config.columns[colKey];
    if(headers[colName] === undefined){
        const newColIndex = sheet.getLastColumn() + 1;
        sheet.getRange(1, newColIndex).setValue(colName);
        headers[colName] = newColIndex - 1;
        Logger.log(`Created missing column "${colName}" in sheet "${sheetName}".`);
    }
  }
  return { sheet, headers };
}

function checkAdmin(employeeId) {
  try {
    const adminIds = getAdminIds();
    return adminIds.includes(String(employeeId));
  } catch (e) { return false; }
}

function checkTechnician(employeeId) {
  try {
    const { sheet, headers } = getSheetAndHeaders(CONFIG.technicians.sheetName);
    const idColIndex = headers[CONFIG.technicians.columns.id];
    if (idColIndex === undefined) return false;
    const technicianIds = sheet.getRange(2, idColIndex + 1, sheet.getLastRow(), 1).getValues().flat().map(String).filter(id => id.trim() !== '');
    return technicianIds.includes(String(employeeId));
  } catch (e) { return false; }
}

function jsonResponse(data) {
  return ContentService.createTextOutput(JSON.stringify({ status: 'success', data: data }))
    .setMimeType(ContentService.MimeType.JSON);
}

function jsonError(message) {
  return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: message }))
    .setMimeType(ContentService.MimeType.JSON);
}
